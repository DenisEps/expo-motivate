{"ast":null,"code":"var _jsxFileName = \"/Users/nikitalambin/Desktop/phase3/expo-motivate/client/src/components/ProgressBar/Donut.js\";\nimport * as React from 'react';\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Constants from 'expo-constants';\nimport Svg, { G, Circle, Rect } from 'react-native-svg';\nvar AnimatedCircle = Animated.createAnimatedComponent(Circle);\nvar AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\nexport default function Donut(_ref) {\n  var _ref$percentage = _ref.percentage,\n      percentage = _ref$percentage === void 0 ? 75 : _ref$percentage,\n      _ref$radius = _ref.radius,\n      radius = _ref$radius === void 0 ? 50 : _ref$radius,\n      _ref$strokeWidth = _ref.strokeWidth,\n      strokeWidth = _ref$strokeWidth === void 0 ? 10 : _ref$strokeWidth,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === void 0 ? 500 : _ref$duration,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? \"tomato\" : _ref$color,\n      _ref$delay = _ref.delay,\n      delay = _ref$delay === void 0 ? 1000 : _ref$delay,\n      textColor = _ref.textColor,\n      _ref$max = _ref.max,\n      max = _ref$max === void 0 ? 100 : _ref$max;\n  var animated = React.useRef(new Animated.Value(0)).current;\n  var circleRef = React.useRef();\n  var inputRef = React.useRef();\n  var circumference = 2 * Math.PI * radius;\n  var halfCircle = radius + strokeWidth;\n\n  var animation = function animation(toValue) {\n    return Animated.timing(animated, {\n      delay: 1000,\n      toValue: 28,\n      duration: duration,\n      useNativeDriver: true,\n      easing: Easing.out(Easing.ease)\n    }).start(function () {\n      animation(toValue === 0 ? percentage : 0);\n    });\n  };\n\n  React.useEffect(function () {\n    animation(percentage);\n    animated.addListener(function (v) {\n      var maxPerc = 100 * v.value / max;\n      var strokeDashoffset = circumference - circumference * maxPerc / 100;\n\n      if (inputRef == null ? void 0 : inputRef.current) {\n        inputRef.current.setNativeProps({\n          text: Math.round(v.value) + \"% LVL\"\n        });\n      }\n\n      if (circleRef == null ? void 0 : circleRef.current) {\n        circleRef.current.setNativeProps({\n          strokeDashoffset: strokeDashoffset\n        });\n      }\n    }, [max, percentage]);\n    return function () {\n      animated.removeAllListeners();\n    };\n  });\n  return React.createElement(View, {\n    style: {\n      width: radius * 2,\n      height: radius * 2\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, React.createElement(Svg, {\n    height: radius * 2,\n    width: radius * 2,\n    viewBox: \"0 0 \" + halfCircle * 2 + \" \" + halfCircle * 2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, React.createElement(G, {\n    rotation: \"-90\",\n    origin: halfCircle + \", \" + halfCircle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, React.createElement(Circle, {\n    ref: circleRef,\n    cx: \"50%\",\n    cy: \"50%\",\n    r: radius,\n    fill: \"transparent\",\n    stroke: color,\n    strokeWidth: strokeWidth,\n    strokeLinecap: \"round\",\n    strokeDashoffset: circumference,\n    strokeDasharray: circumference,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }), React.createElement(Circle, {\n    cx: \"50%\",\n    cy: \"50%\",\n    r: radius,\n    fill: \"transparent\",\n    stroke: color,\n    strokeWidth: strokeWidth,\n    strokeLinejoin: \"round\",\n    strokeOpacity: \".1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }))), React.createElement(AnimatedTextInput, {\n    ref: inputRef,\n    underlineColorAndroid: \"transparent\",\n    editable: false,\n    defaultValue: \"0\",\n    style: [StyleSheet.absoluteFillObject, {\n      fontSize: radius / 2,\n      color: textColor != null ? textColor : color\n    }, styles.text],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  text: {\n    fontWeight: '900',\n    textAlign: 'center',\n    fontSize: 12\n  }\n});","map":{"version":3,"sources":["/Users/nikitalambin/Desktop/phase3/expo-motivate/client/src/components/ProgressBar/Donut.js"],"names":["React","Constants","Svg","G","Circle","Rect","AnimatedCircle","Animated","createAnimatedComponent","AnimatedTextInput","TextInput","Donut","percentage","radius","strokeWidth","duration","color","delay","textColor","max","animated","useRef","Value","current","circleRef","inputRef","circumference","Math","PI","halfCircle","animation","toValue","timing","useNativeDriver","easing","Easing","out","ease","start","useEffect","addListener","v","maxPerc","value","strokeDashoffset","setNativeProps","text","round","removeAllListeners","width","height","StyleSheet","absoluteFillObject","fontSize","styles","create","fontWeight","textAlign"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Easing,\n  TextInput,\n  Animated,\n  Text,\n  View,\n  StyleSheet,\n} from 'react-native';\nimport Constants from 'expo-constants';\nimport Svg, { G, Circle, Rect } from 'react-native-svg';\n\nconst AnimatedCircle = Animated.createAnimatedComponent(Circle);\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nexport default function Donut({\n  percentage = 75,\n  radius = 50,\n  strokeWidth = 10,\n  duration = 500,\n  color = \"tomato\",\n  delay = 1000,\n  textColor,\n  max = 100\n}) {\n  const animated = React.useRef(new Animated.Value(0)).current;\n  const circleRef = React.useRef();\n  const inputRef = React.useRef();\n  const circumference = 2 * Math.PI * radius;\n  const halfCircle = radius + strokeWidth;\n\n  const animation = (toValue) => {\n    return Animated.timing(animated, {\n      delay: 1000,\n      toValue: 28,\n      duration,\n      useNativeDriver: true,\n      easing: Easing.out(Easing.ease),\n    }).start(() => {\n      animation(toValue === 0 ? percentage : 0);\n    });\n  };\n\n  React.useEffect(() => {\n    animation(percentage);\n    animated.addListener((v) => {\n      const maxPerc = 100 * v.value / max;\n      const strokeDashoffset = circumference - (circumference * maxPerc) / 100;\n      if (inputRef?.current) {\n        inputRef.current.setNativeProps({\n          text: `${Math.round(v.value)}% LVL`,\n        });\n      }\n      if (circleRef?.current) {\n        circleRef.current.setNativeProps({\n          strokeDashoffset,\n        });\n      }\n    }, [max, percentage]);\n\n    return () => {\n      animated.removeAllListeners();\n    };\n  });\n\n  return (\n    <View style={{ width: radius * 2, height: radius * 2 }}>\n      <Svg\n        height={radius * 2}\n        width={radius * 2}\n        viewBox={`0 0 ${halfCircle * 2} ${halfCircle * 2}`}>\n        <G\n          rotation=\"-90\"\n          origin={`${halfCircle}, ${halfCircle}`}>\n          <Circle\n            ref={circleRef}\n            cx=\"50%\"\n            cy=\"50%\"\n            r={radius}\n            fill=\"transparent\"\n            stroke={color}\n            strokeWidth={strokeWidth}\n            strokeLinecap=\"round\"\n            strokeDashoffset={circumference}\n            strokeDasharray={circumference}\n          />\n          <Circle\n            cx=\"50%\"\n            cy=\"50%\"\n            r={radius}\n            fill=\"transparent\"\n            stroke={color}\n            strokeWidth={strokeWidth}\n            strokeLinejoin=\"round\"\n            strokeOpacity=\".1\"\n          />\n        </G>\n      </Svg>\n      <AnimatedTextInput\n        ref={inputRef}\n        underlineColorAndroid=\"transparent\"\n        editable={false}\n        defaultValue=\"0\"\n        style={[\n          StyleSheet.absoluteFillObject,\n          { fontSize: radius / 2, color: textColor ?? color },\n          styles.text,\n        ]}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  text: { fontWeight: '900', textAlign: 'center', fontSize: 12 },\n});\n"]},"metadata":{},"sourceType":"module"}